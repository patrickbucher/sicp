(define (make-queue)
  (let ((front-ptr '())
	(rear-ptr '()))
    (define (dispatch m)
      (cond ((eq? m 'front-ptr)
	     (lambda () front-ptr))
	    ((eq? m 'rear-ptr)
	     (lambda () rear-ptr))
	    ((eq? m 'set-front-ptr!)
	     (lambda (item) (set! front-ptr item)))
	    ((eq? m 'set-rear-ptr!)
	     (lambda (item) (set! rear-ptr item)))
	    ((eq? m 'empty-queue?)
	     (lambda () (null? front-ptr)))
	    ((eq? m 'front-queue)
	     (lambda ()
	       (if ((dispatch 'empty-queue?))
		   (error "front called with an empty queue")
		   (car front-ptr))))
	    ((eq? m 'insert-queue!)
	     (lambda (item)
	       (let ((new-pair (cons item  '())))
		 (cond (((dispatch 'empty-queue?))
			(set! front-ptr new-pair)
			(set! rear-ptr new-pair)
			dispatch)
		       (else
			(set-cdr! rear-ptr new-pair)
			(set! rear-ptr new-pair)
			dispatch)))))
	    ((eq? m 'delete-queue!)
	     (lambda ()
	       (cond (((dispatch 'empty-queue?))
		      (error "delete! called with an empty queue"))
		     (else
		      (set! front-ptr (cdr front-ptr))
		      dispatch))))))
    dispatch))

(define q (make-queue))
(set! q ((q 'insert-queue!) 1))
(set! q ((q 'insert-queue!) 2))
(set! q ((q 'insert-queue!) 3))
(set! q ((q 'insert-queue!) 4))

;; ((q 'front-queue))
;; 1
;; ((q 'delete-queue!))
;; ((q 'front-queue))
;; 2
