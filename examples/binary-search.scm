(define (compare-to-secret-number lower upper)
  (let ((secret-number (+ (random (+ (- upper lower) 1)) lower)))
    (display "Secret Number: ")
    (display secret-number)
    (newline)
    (lambda (guess)
      (cond ((< guess secret-number) -1)
	    ((> guess secret-number) +1)
	    ((< (abs (- guess secret-number)) 1.0) 0)))))

(define (binary-search lower upper)
  (let ((match? (compare-to-secret-number lower upper)))
    (define (try l u)
      (let ((guess (+ (floor (/ (+ (- u l) 1) 2.)) l)))
	(display "Next Guess: ")
	(display guess)
	(newline)
	(let ((hint (match? guess)))
	  (cond ((= hint -1) (try guess u))
		((= hint +1) (try l guess))
		(else guess)))))
    (try lower upper)))
