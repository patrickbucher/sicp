(define (compare-to-secret-number lower upper)
  (let ((secret-number (+ (random (+ (- upper lower) 1)) lower)))
    (display "Secret Number: ")
    (display secret-number)
    (newline)
    (lambda (guess)
      (display "Secret Number: ")
      (display secret-number)
      (newline)
      (cond ((< guess secret-number) -1)
	    ((> guess secret-number) +1)
	    ((< (abs (- guess secret-number)) 1.0) 0)))))

(define (binary-search lower upper max-steps)
  (let ((match? (compare-to-secret-number lower upper)))
    (define (try a b guess steps-left)
      (cond ((= steps-left 0) -1)
	    (else
      (display "Guess: ")
      (display guess)
      (newline)
      (let ((hint (match? guess)))
	(cond ((= hint -1) (try guess b (ceiling (/ (+ (- b guess) guess) 2.0)) (- steps-left 1)))
	      ((= hint +1) (try a guess (floor (/ (+ (- guess a) a) 2.0)) (- steps-left 1)))
	      (else guess))))))
    (try lower upper (round (/ (+ (- upper lower) lower) 2.0)) max-steps)))
